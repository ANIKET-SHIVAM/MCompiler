NAS:

NPB3.3.1/NPB3.3-OMP/common/c_timers.c 
  18c18
  < #if defined(_OPENMP) //&& (_OPENMP > 200010)
  ---
  > #if defined(_OPENMP) && (_OPENMP > 200010)

NPB3.3.1/NPB3.3-OMP/DC/jobcntl.c 
  494d493
  <    #pragma mC skiploop

NPB3.3.1/NPB3.3-OMP/IS/is.c62c62
  < //#define USE_BUCKETS
  ---
  > #define USE_BUCKETS
  228,233c228
  < double  randlc( double *X, double *A,
  <                        int* KS, 
  <                        double* R23, 
  <                        double* R46, 
  <                        double* T23, 
  <                        double* T46 );
  ---
  > double  randlc( double *X, double *A );
  301c296,298
  < //#pragma omp threadprivate(KS, R23, R46, T23, T46)
  ---
  > static int      KS=0;
  > static double R23, R46, T23, T46;
  > #pragma omp threadprivate(KS, R23, R46, T23, T46)
  303,308c300
  < double  randlc( double *X, double *A,
  <                        int* KS, 
  <                        double* R23, 
  <                        double* R46, 
  <                        double* T23, 
  <                        double* T46 )
  ---
  > double  randlc( double *X, double *A )
  318c310
  <       if (*KS == 0) 
  ---
  >       if (KS == 0) 
  320,323c312,316
  <         *R23 = 1.0;
  <         *R46 = 1.0;
  <         *T23 = 1.0;
  <         *T46 = 1.0;
  ---
  >         R23 = 1.0;
  >         R46 = 1.0;
  >         T23 = 1.0;
  >         T46 = 1.0;
  >     
  326,327c319,320
  <           *R23 = 0.50 * (*R23);
  <           *T23 = 2.0 * (*T23);
  ---
  >           R23 = 0.50 * R23;
  >           T23 = 2.0 * T23;
  331,332c324,325
  <           *R46 = 0.50 * (*R46);
  <           *T46 = 2.0 * (*T46);
  ---
  >           R46 = 0.50 * R46;
  >           T46 = 2.0 * T46;
  334c327
  <         *KS = 1;
  ---
  >         KS = 1;
  339c332
  <       T1 = *R23 * *A;
  ---
  >       T1 = R23 * *A;
  342c335
  <       A2 = *A - *T23 * A1;
  ---
  >       A2 = *A - T23 * A1;
  348c341
  <       T1 = *R23 * *X;
  ---
  >       T1 = R23 * *X;
  351c344
  <       X2 = *X - *T23 * X1;
  ---
  >       X2 = *X - T23 * X1;
  354c347
  <       j  = *R23 * T1;
  ---
  >       j  = R23 * T1;
  356,358c349,351
  <       Z = T1 - *T23 * T2;
  <       T3 = *T23 * Z + A2 * X2;
  <       j  = *R46 * T3;
  ---
  >       Z = T1 - T23 * T2;
  >       T3 = T23 * Z + A2 * X2;
  >       j  = R46 * T3;
  360,361c353,354
  <       *X = T3 - *T46 * T4;
  <       return(*R46 * *X);
  ---
  >       *X = T3 - T46 * T4;
  >       return(R46 * *X);
  385,390c378
  <                        double a,      /* Ran num gen mult, try 1220703125.00 */
  <                        int* KS, 
  <                        double* R23, 
  <                        double* R46, 
  <                        double* T23, 
  <                        double* T46 )
  ---
  >                        double a )     /* Ran num gen mult, try 1220703125.00 */
  407c395
  <             (void)randlc( &t2, &t2, KS, R23, R46, T23, T46 );
  ---
  >             (void)randlc( &t2, &t2 );
  411c399
  <             (void)randlc( &t1, &t2, KS, R23, R46, T23, T46 );
  ---
  >             (void)randlc( &t1, &t2 );
  415c403
  <       (void)randlc( &t1, &t2, KS, R23, R46, T23, T46 );
  ---
  >       (void)randlc( &t1, &t2 );
  427c415
  < void  create_seq( double seed, double a) 
  ---
  > void  create_seq( double seed, double a )
  431,432d418
  <   int     KS=0;
  <   double  R23, R46, T23, T46;
  434c420
  < #pragma omp parallel private(x,s,i,k, KS, R23, R46, T23, T46)
  ---
  > #pragma omp parallel private(x,s,i,k)
  456c442
  <         (long)4*NUM_KEYS, seed, an, &KS, &R23, &R46, &T23, &T46 );
  ---
  >         (long)4*NUM_KEYS, seed, an );
  462,465c448,451
  <       x = randlc(&s, &an, &KS, &R23, &R46, &T23, &T46);
  <       x += randlc(&s, &an, &KS, &R23, &R46, &T23, &T46);
  <           x += randlc(&s, &an, &KS, &R23, &R46, &T23, &T46);
  <       x += randlc(&s, &an, &KS, &R23, &R46, &T23, &T46);  
  ---
  >       x = randlc(&s, &an);
  >       x += randlc(&s, &an);
  >           x += randlc(&s, &an);
  >       x += randlc(&s, &an);  
  807,808c793
  <                         if( key_rank != test_rank_array[i]+(iteration-2) ){ 
  <                             printf("key_rank: %d, test: %d\n", key_rank, test_rank_array[i]+(iteration-2)); 
  ---
  >                         if( key_rank != test_rank_array[i]+(iteration-2) )
  810c795
  <                         } else
  ---
  >                         else
  815,816c800
  <                         if( key_rank != test_rank_array[i]-iteration ){
  <                             printf("key_rank: %d, test: %d\n", key_rank, test_rank_array[i]-(iteration)); 
  ---
  >                         if( key_rank != test_rank_array[i]-iteration )
  818c802
  <                         } else
  ---
  >                         else

--------------------------------------------------------------------------------------------------------------------
SPEC OMP 2012:

359.botsspar/src/common/bots.h 
  20a21,22
  > #ifndef _BOTS_H_
  > 
  98a101
  > #endif

359.botsspar/src/omp-tasks/sparselu/sparselu_single/sparselu.c 
  223d222
  < {
  225d223
  < {
  231d228
  <          {
  236d232
  <          }
  239d234
  <          {
  244d238
  <          }
  252d245
  <                {
  258d250
  <                }
  262,263d253
  < }
  < }

358.botsalgn/src/omp-tasks/alignment/alignment_for/alignment.h 
  28,31d27
  < extern char *amino_acid_order;
  < extern char *amino_acid_codes;
  < 
  < extern int gon250mt[276];

358.botsalgn/src/omp-tasks/alignment/alignment_for/alignment.c
  28a29
  > #include "param.h"
  31,58d31
  < 
  < char *amino_acid_order = "ABCDEFGHIKLMNPQRSTVWXYZ";
  < char *amino_acid_codes = "ABCDEFGHIKLMNPQRSTUVWXYZ-";
  < 
  < int gon250mt[276]={
  <   24,
  <    0,   0,
  <    5,   0, 115,
  <   -3,   0, -32,  47,
  <    0,   0, -30,  27,  36,
  <  -23,   0,  -8, -45, -39,  70,
  <    5,   0, -20,   1,  -8, -52,  66,
  <   -8,   0, -13,   4,   4,  -1, -14,  60,
  <   -8,   0, -11, -38, -27,  10, -45, -22,  40,
  <   -4,   0, -28,   5,  12, -33, -11,   6, -21,  32,
  <  -12,   0, -15, -40, -28,  20, -44, -19,  28, -21,  40,
  <   -7,   0,  -9, -30, -20,  16, -35, -13,  25, -14,  28,  43,
  <   -3,   0, -18,  22,   9, -31,   4,  12, -28,   8, -30, -22,  38,
  <    3,   0, -31,  -7,  -5, -38, -16, -11, -26,  -6, -23, -24,  -9,  76,
  <   -2,   0, -24,   9,  17, -26, -10,  12, -19,  15, -16, -10,   7,  -2,  27,
  <   -6,   0, -22,  -3,   4, -32, -10,   6, -24,  27, -22, -17,   3,  -9,  15,  47,
  <   11,   0,   1,   5,   2, -28,   4,  -2, -18,   1, -21, -14,   9,   4,   2,  -2,  22,
  <    6,   0,  -5,   0,  -1, -22, -11,  -3,  -6,   1, -13,  -6,   5,   1,   0,  -2,  15,  25,
  <    1,   0,   0, -29, -19,   1, -33, -20,  31, -17,  18,  16, -22, -18, -15, -20, -10,   0,  34,
  <  -36,   0, -10, -52, -43,  36, -40,  -8, -18, -35,  -7, -10, -36, -50, -27, -16, -33, -35, -26, 142,
  <    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  <  -22,   0,  -5, -28, -27,  51, -40,  22,  -7, -21,   0,  -2, -14, -31, -17, -18, -19, -19, -11,  41,   0,  78,
  <    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0};


